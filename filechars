#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
from sys import stdin, stderr, exit

# Handle broken pipes:
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE, SIG_DFL) 

version = '0.2a'
parser = argparse.ArgumentParser(description='Tabulate single (8-byte) characters in a file')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {0}'.format(version))
parser.add_argument('-V', '--verbose', dest='verbosity_level', default='warning', choices=['error', 'warning', 'info', 'debug'], help='Set logging level (default warning)')
parser.add_argument('-e', '--include-empty', dest='include_empty', action='store_true', default=False, help='list empty characters')
parser.add_argument('-r', '--include-representation', dest='include_repr', action='store_true', default=False, help='output character representation')
parser.add_argument('-s', '--sort-output', dest='sort', action='store_true', default=False, help='sort output character counts')
parser.add_argument('-b', '--block-size', dest='blocksize', metavar='<n>', type=int, default=1000, help='block read size')
parser.add_argument(dest='input_file', metavar='<file>', nargs='?', default=None, help='input file')
args = parser.parse_args()

# Set up logging based on the verbosity level set by the command line arguments:
log = logging.getLogger()
log_handler = logging.StreamHandler()
log.default_msec_format = ''
log_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
log.setLevel(args.verbosity_level.upper())
log.addHandler(log_handler)

# A function to quit with an error:
def error(msg, exit_code=1):
    log.error(msg)
    exit(exit_code)

# Attempt to open the input file:
if args.input_file is None:
    log.info('input file is stdin')
    input_handle = stdin.buffer
else:
    log.info('input file is {}'.format(args.input_file))
    try: input_handle = open(args.input_file, 'rb')
    except Exception as err: error('failed to open input file {} ({})'.format(args.input_file, str(err)))
    
# Pull out the block size:
blocksize = args.blocksize
if blocksize < 1: error('invalid blocksize ({})'.format(blocksize))
log.info('using blocksize of {} bytes'.format(blocksize))
if args.sort is True: log.info('sorting output character counts')

# Initialize the character counts:
byte_counts = [0 for i in range(256)]

# Read the file in blocks:
while True:
    offset = input_handle.tell()
    d = input_handle.read(blocksize)
    log.debug('read block ({} bytes) at file offset {}'.format(len(d), offset))
    for c in d: byte_counts[c] += 1
    if len(d) != blocksize: break
log.debug('finished reading {} bytes'.format(input_handle.tell()))

# Set the character labels:
if args.include_repr is True: chr_labels = ['0x{:02X}\t{}'.format(c, repr(chr(c))) for c in range(256)]
else: chr_labels = ['0x{:02X}'.format(c) for c in range(256)]

# Get the indices to use:
if args.sort is True: char_indices = reversed([i[0] for i in sorted(enumerate(byte_counts), key=lambda x:x[1])])
else: char_indices = range(256)

# Print out the final counts:
for i in char_indices:
    n = byte_counts[i]
    if (n == 0) and (args.include_empty is False): continue
    print('{}\t{}'.format(chr_labels[i], n))
